{"randomArticles":[{"articleTitle":"设计模式--抽象工厂","articleAbstractText":"意图 抽象工厂模式是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。 简单来说，抽象工厂模式下，我们实际的对象创建都交给了一些工厂类去做，这些工厂类根据具体需求不同，可以创建出很多种类型的工厂类。 问题场景 比如去家具城买家具，如果确定了某种风格的家居装饰（比如：中式），那后续在家具城买的桌子，椅子、床等等家具都是类似风格。 此时需要设法去单独生成每一件家具对象，保证出于一致的风格，最后才能让整个房间看着和谐统一。 但是在代码实现过程中，我们也不希望每次增加新的装修风格时，都需要对已有的代码进行调整，并且家具的产品目录更新迭代非常快，要保证每次调整只是新增，而非修改既有代码。 解决方案 那么针对上面的情况，在抽象工厂模式下，可以为每件家具产品确定一个声明接口，比如椅子，就创建一个Chair接口；然后根据风格不同，每种风格都实现这些接口，这样就组成了一个继承关系： 然后，接下来就需要声明一些抽象工厂，用于创建这一系列的具体家具产品，比如：创建一个FurnitureFactory，它里面定义一系列创建产品的方法，createChair、createSofa等等。 注意....","articleStatus":0,"articlePermalink":"/articles/2022/11/05/1667632437259.html","articleImg1URL":"https://b3logfile.com/bing/20181116.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}